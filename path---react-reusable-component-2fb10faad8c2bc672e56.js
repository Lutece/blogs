webpackJsonp([0xa7c8eb2710c7],{301:function(n,s){n.exports={data:{markdownRemark:{html:'<h3>개요</h3>\n<ul>\n<li>리액트 컴포넌트를 만드는 방법</li>\n<li>상태 비저장 함수형 컴포넌트</li>\n<li>상태를 사용할 때와 사용하지 않을 때</li>\n<li>각 컴포넌트의 프로퍼티 형식을 명확하게 정의해야 하는 이유</li>\n<li>리액트 독젠을 이용해 동적으로 설명서 생성하기</li>\n<li>결합된 컴포넌틀르 재사용 가능 컴포넌트로 변환하는 과정</li>\n<li>리액트 스토리북을 사용해 재사용 가능 컴포넌트 컬렉션의 문서를 생성</li>\n</ul>\n<hr>\n<h3>\b클래스 만들기</h3>\n<h4><code>createClass 팩토리</code></h4>\n<p>첫 번째 방법은 React Core 내에 있는 메서드를 사용하는 방법입니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Using JSX <span class="token operator">--</span><span class="token operator">></span>\n<span class="token keyword">const</span> Button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">creatClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">&lt;</span>button <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//Need to use babel for transfiling</span>\n\n<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Using Pure JS <span class="token operator">--</span><span class="token operator">></span>\n<span class="token keyword">const</span> Button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'button\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//It can be read without babel</span>\n</code></pre>\n      </div>\n<h4><code>React.Component 확장</code></h4>\n<p>두 번째 방법은 ES2015의 Class를 사용하는 것입니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code>Class <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button <span class="token operator">/</span><span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4>차이점</h4>\n<ol>\n<li>프로퍼티</li>\n</ol>\n<p>createClass를 통해 컴포넌트를 생성하면 프로퍼티는 createClass 내에 선언합니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> Button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  propTypes<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n    text<span class="token punctuation">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">getDefaultProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      text<span class="token punctuation">:</span> <span class="token string">\'Click me\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>만약 ES2015의 클래스 구조로 컴포넌트를 생성하게 되면 클래스를 먼저 정의한 다음 \b클래스의 프로퍼티를 설정합니다. 선언된 클래스의 프로퍼티는 클래스를 통해 생성된 컴포넌트의 프로퍼티가 됩니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nButton<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token punctuation">:</span> React<span class="token punctuation">.</span>PropTypes<span class="token punctuation">.</span>string\n<span class="token punctuation">}</span>\n\nButton<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token punctuation">:</span> <span class="token string">\'Click me\'</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<ol start="2">\n<li>초기 상태 설정</li>\n</ol>\n<p>createClass를 통해 컴포넌트를 생성할 경우 React API(getInitialState)를 사용해야 하며, 인자로 넘기는 객체 안에 컴포넌트\b 생성 시 필요한 정보들을 많이 담고 있다는 것을 확인할 수 있습니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> Button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">getInitialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      text<span class="token punctuation">:</span> <span class="token string">\'Click me\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>ES2015 Class를 통해 상태를 설정할 경우 클래스 내부의 프로퍼티르 선언하며, React API를 사용하지 않습니다.\n또한 ES2015 Class를 통해 정의한 컴포넌트는 this를 사용하기 위해서는\nconstructor 내에 있는 super가 필요합니다.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>\n      text<span class="token punctuation">:</span> <span class="token string">\'Click me\'</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<h4>자동 바인딩</h4>',frontmatter:{date:"January 23, 2018",path:"/react/reusableComponent",title:"재사용 가능한 컴포넌트의 의미"}}},pathContext:{}}}});
//# sourceMappingURL=path---react-reusable-component-2fb10faad8c2bc672e56.js.map