{"version":3,"sources":["webpack:///path---react-combine-component-container-presentation-80c966f53352e2a9bf3e.js","webpack:///./.cache/json/react-combine-component-container-presentation.json"],"names":["webpackJsonp","316","module","exports","data","markdownRemark","html","frontmatter","date","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,soGAAogGC,aAAkQC,KAAA,mBAAAC,KAAA,kDAAAC,MAAA,eAAyGC","file":"path---react-combine-component-container-presentation-80c966f53352e2a9bf3e.js","sourcesContent":["webpackJsonp([32954286527539],{\n\n/***/ 316:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>개요</h3>\\n<ul>\\n<li><strong>컴포넌트가 프로퍼티와 자식을 사용해 다른 컴포넌트와 통신하는 방법</strong></li>\\n<li>컨테이너와 프레젠테이션 패턴으로 코드의 유지 관리성을 개선하는 방법</li>\\n<li>믹스인을 사용한 문제 해결 방법과 실패 이유</li>\\n<li>리컴포즈 라이브러리와 기본 제공 함수</li>\\n<li>컨텍스트와 상호작용하고 컨텍스트와 컴포넌트 간의 결합을 방지하는 방법</li>\\n<li>함수 자식 컴포넌트 패턴과 그 장점 소개</li>\\n</ul>\\n<hr>\\n<p>컴포넌트가 다른 컴포넌트로 프로퍼티를 전달할 때는 컴포넌트의 부모-자식 관계에 상관없이\\n전달하는 쪽을 <strong>소유자</strong> 라고 한다.</p>\\n<hr>\\n<h4>Children</h4>\\n<p>소유자가 render 메서드 안에 정의된 컴포넌트로 전달하는 children이라는 특수한 프로퍼티가 있다.\\n이 프로퍼티는 포함하는 값에 대한 정보를 제공하지 않기 때문에 불투명하다.</p>\\n<p>프로퍼티는 JSX에서 컴포넌트 자체의 속성으로서 전달되거나, createElement 함수의 두 번째 매개변수로\\n전달된 프로퍼티를 받는다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nButton<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    children<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n        React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n        React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>element\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">/*\\n    children 요소가 하나 있는 경우,\\n    배열이 아닌 요소로 반환되기 떄문에 children 요소의 타입을 정의할 때\\n    주의해야 한다.\\n*/</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>Button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>img src<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span>text<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\">/*\\n    이 내용이 children에 모두 담겨\\n    그대로 렌더링 된다.\\n*/</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h4>컨테이너와 프레젠테이션 패턴</h4>\",\"frontmatter\":{\"date\":\"January 24, 2018\",\"path\":\"/react/combine-component/container-presentation\",\"title\":\"컴포넌트 조합하기\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---react-combine-component-container-presentation-80c966f53352e2a9bf3e.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>개요</h3>\\n<ul>\\n<li><strong>컴포넌트가 프로퍼티와 자식을 사용해 다른 컴포넌트와 통신하는 방법</strong></li>\\n<li>컨테이너와 프레젠테이션 패턴으로 코드의 유지 관리성을 개선하는 방법</li>\\n<li>믹스인을 사용한 문제 해결 방법과 실패 이유</li>\\n<li>리컴포즈 라이브러리와 기본 제공 함수</li>\\n<li>컨텍스트와 상호작용하고 컨텍스트와 컴포넌트 간의 결합을 방지하는 방법</li>\\n<li>함수 자식 컴포넌트 패턴과 그 장점 소개</li>\\n</ul>\\n<hr>\\n<p>컴포넌트가 다른 컴포넌트로 프로퍼티를 전달할 때는 컴포넌트의 부모-자식 관계에 상관없이\\n전달하는 쪽을 <strong>소유자</strong> 라고 한다.</p>\\n<hr>\\n<h4>Children</h4>\\n<p>소유자가 render 메서드 안에 정의된 컴포넌트로 전달하는 children이라는 특수한 프로퍼티가 있다.\\n이 프로퍼티는 포함하는 값에 대한 정보를 제공하지 않기 때문에 불투명하다.</p>\\n<p>프로퍼티는 JSX에서 컴포넌트 자체의 속성으로서 전달되거나, createElement 함수의 두 번째 매개변수로\\n전달된 프로퍼티를 받는다.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Button</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token operator\\\">&lt;</span>button className<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'btn'</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>button<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nButton<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    children<span class=\\\"token punctuation\\\">:</span> React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n        React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n        React<span class=\\\"token punctuation\\\">.</span>PropTypes<span class=\\\"token punctuation\\\">.</span>element\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">/*\\n    children 요소가 하나 있는 경우,\\n    배열이 아닌 요소로 반환되기 떄문에 children 요소의 타입을 정의할 때\\n    주의해야 한다.\\n*/</span>\\n\\n<span class=\\\"token operator\\\">&lt;</span>Button<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>img src<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>span<span class=\\\"token operator\\\">></span>text<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>span<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Button<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token comment\\\">/*\\n    이 내용이 children에 모두 담겨\\n    그대로 렌더링 된다.\\n*/</span>\\n</code></pre>\\n      </div>\\n<hr>\\n<h4>컨테이너와 프레젠테이션 패턴</h4>\",\"frontmatter\":{\"date\":\"January 24, 2018\",\"path\":\"/react/combine-component/container-presentation\",\"title\":\"컴포넌트 조합하기\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/react-combine-component-container-presentation.json\n// module id = 316\n// module chunks = 32954286527539"],"sourceRoot":""}